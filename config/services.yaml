parameters:
    cache_adapter: cache.adapter.apcu
    locale:        'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire:      true       # Automatically injects dependencies in your services.
        autoconfigure: true       # Automatically registers your services as commands, event subscribers, etc.
        bind:
          $uploadPath:    '%kernel.project_dir%/public/uploads'


  # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:  '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
    
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            # If you're using Doctrine & want to re-use that connection, then:
            # comment-out the above 2 lines and uncomment the line below
            - !service { class: PDO, factory: ['@database_connection', 'getWrappedConnection'] }
            
            #   Must implement this option for MySQL and MariaDB
            # If you get transaction issues (e.g. after login) uncomment the line below
            - { lock_mode: 1 }

    # This is for the "Remember Me" function when logging in and it
    # connects to the doctrine table for tokens.
    Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider: ~
    
    easycorp.easylog.handler:
        class:  EasyCorp\EasyLog\EasyLogHandler
        public: false
        arguments:
            - '%kernel.logs_dir%/%kernel.environment%.log'

